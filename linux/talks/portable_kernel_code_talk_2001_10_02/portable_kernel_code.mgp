%%  Writing Portable Linux Drivers
%%  last modified 2001_10_02
%%  Greg Kroah-Hartman
%%  <greg@kroah.com>
%%  <gregkh@us.ibm.com>
%%  Released under the GNU FDL
%%
%% use our own settings
%deffont "standard"   tfont "standard.ttf",   tmfont "kochi-mincho.ttf"
%deffont "thick"      tfont "thick.ttf",      tmfont "goth.ttf"
%deffont "typewriter" tfont "typewriter.ttf", tmfont "goth.ttf"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Default settings per each line numbers.
%%
%default 1 leftfill, size 2, fore "white", back "black", font "thick"
%default 2 size 7, vgap 10, prefix " "
%default 3 size 2, bar "gray70", vgap 10
%default 4 size 5, fore "white", vgap 30, prefix " ", font "standard"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Default settings that are applied to TAB-indented lines.
%%
#%tab 1 size 5, vgap 40, prefix "  ", icon box "green" 50
%tab 1 size 5, vgap 40, prefix "  ", icon arc "green" 40
%tab 2 size 4, vgap 40, prefix "      ", icon arc "yellow" 50
%tab 3 size 3, vgap 40, prefix "            ", icon delta3 "white" 40
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page
%nodefault
%size 7, font "standard", fore "white", center



Writing Portable Linux Drivers
%size 4



October 2, 2001


Greg Kroah-Hartman
%size 3
%font "typewriter"

gregkh@us.ibm.com
greg@kroah.com

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Internal Kernel Data Types

%font "typewriter", size 4
  #include <linux/types.h>

    u8;   /* unsigned byte (8 bits) */
    u16;  /* unsigned word (16 bits) */
    u32;  /* unsigned 32-bit value */
    u64;  /* unsigned 64-bit value */

    s8;   /* signed byte (8 bits) */
    s16;  /* signed word (16 bits) */
    s32;  /* signed 32-bit value */
    s64;  /* signed 64-bit value */

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Exportable Kernel Data Types

%font "typewriter", size 4
  #include <linux/types.h>

    __u8;   /* unsigned byte (8 bits) */
    __u16;  /* unsigned word (16 bits) */
    __u32;  /* unsigned 32-bit value */
    __u64;  /* unsigned 64-bit value */

    __s8;   /* signed byte (8 bits) */
    __s16;  /* signed word (16 bits) */
    __s32;  /* signed 32-bit value */
    __s64;  /* signed 64-bit value */
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Native compiler data sizes


%font "typewriter", size 4
	int 
%cont, font "standard"
is guarenteed to be at least 32 bits.

	sizeof(pointer) != sizeof(unsigned int)

	sizeof(pointer) == sizeof(unsigned long)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Use Native kernel data types

%font "typewriter"

	pid_t

	gid_t

	size_t

%font "standard"
	don't use 
%cont, font "typewriter"
long
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Use Native kernel data structures


%font "typewriter", size 4
	#include <linux/list.h>
%font "standard"
		Linked List implementation


%font "typewriter", size 4
	#include <linux/rbtree.h>
%font "standard"
		Red Black Tree implementation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Memory issues


	memory is not always in 4Kb pages

	use 
%cont, font "typewriter"
PAGE_SIZE
%cont, font "standard"
 and 
%cont, font "typewriter"
PAGE_SHIFT
%font "standard"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Memory issues - example

%font "typewriter", size 4
  drivers/usb/audio.c

    static int dmabuf_mmap(...)
    {
      size >>= PAGE_SHIFT;
      for (nr = 0; nr < size; nr++)
        if (!db->sgbuf[nr])
          return -EINVAL;
      db->mapped = 1;
      for (nr = 0; nr < size; nr++) {
        if (remap_page_range(start, 
                               virt_to_phys(db->sgbuf[nr]),
                               PAGE_SIZE, prot))
          return -EAGAIN;
        start += PAGE_SIZE;
      }
      return 0;
    }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Endian issues

%font "typewriter", size 4
  #include <asm/byteorder.h>

    u64 __cpu_to_le64 (u64);    u64 __le64_to_cpu (u64);
    u32 __cpu_to_le32 (u32);    u32 __le32_to_cpu (u32);
    u16 __cpu_to_le16 (u16);    u16 __le16_to_cpu (u16);

    u64 __cpu_to_be64 (u64);    u64 __be64_to_cpu (u64);
    u32 __cpu_to_be32 (u32);    u32 __be32_to_cpu (u32);
    u16 __cpu_to_be16 (u16);    u16 __be16_to_cpu (u16);

%font "standard"
    many more...

	The leading "__" is optional
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Endian issues - example

%font "typewriter", size 4
  drivers/usb/serial/visor.c

    struct visor_connection_info *connection_info;

    /* send a get connection info request */
    usb_control_msg (serial->dev,
                       usb_rcvctrlpipe(serial->dev, 0),
                       VISOR_GET_CONNECTION_INFORMATION,
                       0xc2, 0x0000, 0x0000,
                       transfer_buffer, 0x12, 300);

    connection_info = 
         (struct visor_connection_info *)transfer_buffer;

    le16_to_cpus(&connection_info->num_ports);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Data alignment

%font "typewriter"
    __attribute__ ((packed))
%font "standard"

	Prevents "holes" in memory mapped structures

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Data alignment - example 1


	Pack the entire structure

%font "typewriter", size 4
    include/linux/usb.h
  
    typedef struct {
        __u8 requesttype;
        __u8 request;
        __u16 value;
        __u16 index;
        __u16 length;
    } devrequest __attribute__ ((packed));


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Data alignment - example 2


	Pack only a section of a structure
%font "typewriter", size 4
    include/linux/usb.h

    struct usb_endpoint_descriptor {
        __u8  bLength           __attribute__ ((packed));
        __u8  bDescriptorType   __attribute__ ((packed));
        __u8  bEndpointAddress  __attribute__ ((packed));
        __u8  bmAttributes      __attribute__ ((packed));
        __u16 wMaxPacketSize    __attribute__ ((packed));
        __u8  bInterval         __attribute__ ((packed));
        __u8  bRefresh          __attribute__ ((packed));
        __u8  bSynchAddress     __attribute__ ((packed));
        unsigned char *extra;   /* Extra descriptors */
        int extralen;
    };
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

PCI memory access


	No Direct Memory Access!

	Use ioremap / iounmap

	Use pci_write_*_config / pci_read_*_config
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Getting a PCI memory region


%font "typewriter", size 8
	ioremap

%font "typewriter", size 4
  drivers/hotplug/cpqphp.c

   ctrl->hpc_reg = ioremap(pci_resource_start(pdev, 0),
                              pci_resource_len(pdev, 0));
   if (!ctrl->hpc_reg) {
     err("cannot remap MMIO region %lx @ %lx\n",
          pci_resource_len(pdev, 0),
          pci_resource_start(pdev, 0));
     rc = -ENODEV;
     goto err_free_mem_region;
   }
%font "standard"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Releasing a PCI memory region


%font "typewriter", size 8
	iounmap

%font "typewriter", size 4
  drivers/hotplug/cpqphp.c

    iounmap(ctrl->hpc_reg);
%font "standard"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Reading from a PCI memory region


%font "typewriter"
	pci_read_config_byte
%font "standard"
		reads 8 bits

%font "typewriter"
	pci_read_config_word
%font "standard"
		reads 16 bits

%font "typewriter"
	pci_read_config_dword
%font "standard"
		reads 32 bits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Writing to a PCI memory region


%font "typewriter"
	pci_write_config_byte
%font "standard"
		writes 8 bits

%font "typewriter"
	pci_write_config_word
%font "standard"
		writes 16 bits

%font "typewriter"
	pci_write_config_dword
%font "standard"
		writes 32 bits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Where these functions live


%font "typewriter", size 4
  drivers/pci/pci.c

%font "typewriter", size 3
    #define PCI_OP(rw,size,type)                                                  /
    int pci_##rw##_config_##size (struct pci_dev *dev, int pos, type value) /
    {                                                                                 /
        int res;                                                                     /
        unsigned long flags;                                                       /
        if (PCI_##size##_BAD) return PCIBIOS_BAD_REGISTER_NUMBER;            /
        spin_lock_irqsave(&pci_lock, flags);                                    /
        res = dev->bus->ops->rw##_##size(dev, pos, value);                     /
        spin_unlock_irqrestore(&pci_lock, flags);                              /
        return res;                                                                /
    }

    PCI_OP(read, byte, u8 *)
    PCI_OP(read, word, u16 *)
    PCI_OP(read, dword, u32 *)
    PCI_OP(write, byte, u8)
    PCI_OP(write, word, u16)
    PCI_OP(write, dword, u32)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

PCI access - example


%font "typewriter", size 4
  drivers/usb/usb-ohci.c

    pci_read_config_byte (dev, PCI_LATENCY_TIMER, &latency);
    if (latency) {
      pci_read_config_byte (dev, PCI_MAX_LAT, &limit);
      if (limit && limit < latency) {
        dbg ("PCI latency reduced to max %d", limit);
        pci_write_config_byte (dev, PCI_LATENCY_TIMER,
                                  limit);
        ohci->pci_latency = limit;
      } else {
        /* it might already have been reduced */
        ohci->pci_latency = latency;
      }
    }
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Building tips


	Only build code in one directory

%font "typewriter", size 4
    make modules SUBDIRS=drivers/usb/serial

    make bzImage SUBDIRS=drivers/pci

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Other tips


%font "typewriter"
	unsigned int
%cont, font "standard"
 generates faster/smaller code than 
%cont, font "typewriter"
int
%cont, font "standard"
 on all platforms except sh5
		bad:
%font "typewriter", size 4
             int i;
             for (i = 0; i < 10; ++i)...
%font "standard"
		good:
%font "typewriter", size 4
             unsigned int i;
             for (i = 0; i < 10; ++i)...
%font "standard"

	unitialized static variables are 0
		bad:
%font "typewriter", size 4
             static struct *foo = NULL;
%font "standard"
		good:
%font "typewriter", size 4
             static struct *foo;   /* = NULL */
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page

Other tips - cont


	Constant strings
		bad:
%font "typewriter", size 4
             [const] char *foo = "blah";
%font "standard"
		good:
%font "typewriter", size 4
             [const] char foo[] = "blah";
%font "standard"

	Don't use 
%cont, font "typewriter"
*sleep_on()
%cont, font "standard"
 as it is racy.
		Use 
%cont, font "typewriter"
wait_queue
%cont, font "standard"
 or 
%cont, font "typewriter"
schedule_timeout()
%cont, font "standard"
 instead.

	Don't use 
%cont, font "typewriter"
udelay()
%cont, font "standard"
 for long periods of time.

	Use kernel-doc style comments for your public functions and data structures
		See 
%cont, font "typewriter"
Documentation/kernel-doc-nano-HOWTO.txt
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%page
%nodefault
%size 7, font "standard", fore "white", center



Writing Portable Linux Drivers
%size 4



October 2, 2001


Greg Kroah-Hartman
%size 3
%font "typewriter"

gregkh@us.ibm.com
greg@kroah.com

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

